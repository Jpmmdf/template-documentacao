{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o T\u00e9cnica e Operacional","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o t\u00e9cnica e operacional do nosso projeto! Este documento serve como guia central para entender a arquitetura, design, engenharia, vis\u00e3o t\u00e9cnica, vis\u00e3o de produto e processos operacionais envolvidos no desenvolvimento e manuten\u00e7\u00e3o do sistema.</p> <p>Aqui est\u00e3o as principais se\u00e7\u00f5es que voc\u00ea encontrar\u00e1:</p>"},{"location":"#design-e-arquitetura","title":"Design e Arquitetura","text":"<p>Os documentos de design e arquitetura fornecem uma vis\u00e3o completa do sistema, desde a vis\u00e3o geral at\u00e9 detalhes t\u00e9cnicos espec\u00edficos.</p>"},{"location":"#1-system-design-docs","title":"1. System Design Docs","text":"<ul> <li>Descri\u00e7\u00e3o: Vis\u00e3o geral do sistema e dos componentes principais.</li> <li>Objetivo: Proporcionar uma compreens\u00e3o r\u00e1pida das funcionalidades, fluxos e relacionamentos entre os componentes do sistema.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: visao-geral.md</li> </ul>"},{"location":"#2-low-level-design-docs","title":"2. Low-level Design Docs","text":"<ul> <li>Descri\u00e7\u00e3o: Explica\u00e7\u00e3o t\u00e9cnica mais detalhada de cada componente.</li> <li>Objetivo: Oferecer informa\u00e7\u00f5es profundas sobre implementa\u00e7\u00f5es espec\u00edficas, fluxos internos e intera\u00e7\u00f5es entre servi\u00e7os.</li> <li>Status: Pronto.</li> <li>Link: low-level.md</li> </ul>"},{"location":"#3-modelo-c4","title":"3. Modelo C4","text":"<ul> <li>Descri\u00e7\u00e3o: Representa\u00e7\u00e3o visual do contexto, containers, componentes e c\u00f3digo.</li> <li>Objetivo: Facilitar a compreens\u00e3o da arquitetura atrav\u00e9s de diagramas claros e padronizados.</li> <li>Status: Pronto.</li> <li>Link: modelo-c4.md</li> </ul>"},{"location":"#engenharia","title":"Engenharia","text":"<p>Os documentos de engenharia definem os padr\u00f5es, pr\u00e1ticas e processos essenciais para garantir qualidade e consist\u00eancia no desenvolvimento.</p>"},{"location":"#1-guidelines-de-engenharia","title":"1. Guidelines de Engenharia","text":"<ul> <li>Descri\u00e7\u00e3o: Padr\u00f5es de c\u00f3digo, boas pr\u00e1ticas, processos de revis\u00e3o (code review), testes e deploy.</li> <li>Objetivo: Estabelecer \"regras do jogo\" para equipes e IA trabalharem em sincronia.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#2-codigo-de-conduta-tecnica","title":"2. C\u00f3digo de Conduta T\u00e9cnica","text":"<ul> <li>Descri\u00e7\u00e3o: Diretrizes para escrita de c\u00f3digo limpo, reutiliz\u00e1vel e escal\u00e1vel.</li> <li>Objetivo: Garantir que todos os membros da equipe sigam os mesmos princ\u00edpios t\u00e9cnicos.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#visao-tecnica","title":"Vis\u00e3o T\u00e9cnica","text":"<p>Documentos t\u00e9cnicos que descrevem comunica\u00e7\u00f5es, decis\u00f5es e propostas de arquitetura.</p>"},{"location":"#1-trd-technical-reference-document","title":"1. TRD (Technical Reference Document)","text":"<ul> <li>Descri\u00e7\u00e3o: Descreve como os sistemas se comunicam.</li> <li>Objetivo: Documentar protocolos, APIs e interfaces de integra\u00e7\u00e3o.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#2-rfc-request-for-comments","title":"2. RFC (Request for Comments)","text":"<ul> <li>Descri\u00e7\u00e3o: Proposta t\u00e9cnica aberta para discuss\u00e3o.</li> <li>Objetivo: Promover debates colaborativos antes de implementar mudan\u00e7as significativas.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#3-adr-architectural-decision-record","title":"3. ADR (Architectural Decision Record)","text":"<ul> <li>Descri\u00e7\u00e3o: Registra decis\u00f5es t\u00e9cnicas e os motivos por tr\u00e1s delas.</li> <li>Objetivo: Manter um hist\u00f3rico transparente de escolhas cr\u00edticas.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#visao-de-produto","title":"Vis\u00e3o de Produto","text":"<p>Documentos que capturam requisitos, funcionalidades e hist\u00f3rias de usu\u00e1rio.</p>"},{"location":"#1-prd-product-requirements-document","title":"1. PRD (Product Requirements Document)","text":"<ul> <li>Descri\u00e7\u00e3o: Vis\u00e3o geral, requisitos funcionais e n\u00e3o funcionais, restri\u00e7\u00f5es.</li> <li>Objetivo: Definir o escopo do produto e suas expectativas.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#2-frd-functional-requirements-document","title":"2. FRD (Functional Requirements Document)","text":"<ul> <li>Descri\u00e7\u00e3o: Detalha funcionalidades passo a passo.</li> <li>Objetivo: Especificar comportamentos esperados com precis\u00e3o.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#3-user-stories","title":"3. User Stories","text":"<ul> <li>Descri\u00e7\u00e3o: Hist\u00f3rias de uso para traduzir requisitos em contexto real.</li> <li>Objetivo: Fazer com que os requisitos sejam compreens\u00edveis e alinhados com o usu\u00e1rio final.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#documentos-operacionais","title":"Documentos Operacionais","text":"<p>Documentos que auxiliam na opera\u00e7\u00e3o di\u00e1ria e incidentes.</p>"},{"location":"#1-runbooks","title":"1. Runbooks","text":"<ul> <li>Descri\u00e7\u00e3o: Passo a passo para lidar com incidentes, erros e falhas.</li> <li>Objetivo: Garantir que problemas possam ser resolvidos rapidamente e consistentemente.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#2-playbooks","title":"2. Playbooks","text":"<ul> <li>Descri\u00e7\u00e3o: Conjunto de a\u00e7\u00f5es padr\u00e3o para tarefas operacionais frequentes.</li> <li>Objetivo: Padronizar processos repetitivos e evitar inconsist\u00eancias.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#3-infra-docs","title":"3. Infra Docs","text":"<ul> <li>Descri\u00e7\u00e3o: Documenta\u00e7\u00e3o detalhada da infraestrutura montada.</li> <li>Objetivo: Facilitar a compreens\u00e3o e manuten\u00e7\u00e3o da infraestrutura.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#4-cicd-pipelines","title":"4. CI/CD Pipelines","text":"<ul> <li>Descri\u00e7\u00e3o: Documenta\u00e7\u00e3o de como o c\u00f3digo \u00e9 testado, validado e colocado em produ\u00e7\u00e3o.</li> <li>Objetivo: Garantir transpar\u00eancia nos processos de entrega cont\u00ednua.</li> <li>Status: Em constru\u00e7\u00e3o.</li> <li>Link: Em breve dispon\u00edvel</li> </ul>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o \u00e9 fundamental para garantir que todos os stakeholders tenham acesso a informa\u00e7\u00f5es claras e atualizadas sobre o projeto. Ela ajuda a evitar retrabalho, facilita a colabora\u00e7\u00e3o entre times e garante que a arquitetura e os processos estejam bem definidos e alinhados com as necessidades do neg\u00f3cio.</p> <p>Se voc\u00ea tiver d\u00favidas ou precisar de mais detalhes sobre qualquer se\u00e7\u00e3o, consulte os links espec\u00edficos ou entre em contato com a equipe respons\u00e1vel.</p>"},{"location":"#links-rapidos","title":"Links R\u00e1pidos:","text":"<ul> <li>Design e Arquitetura:</li> <li>Low-level Design Docs</li> <li>Modelo C4</li> <li>Engenharia: Em breve dispon\u00edvel</li> <li>Vis\u00e3o T\u00e9cnica: Em breve dispon\u00edvel</li> <li>Vis\u00e3o de Produto: Em breve dispon\u00edvel</li> <li>Documentos Operacionais: Em breve dispon\u00edvel</li> </ul>"},{"location":"arquitetura/desafios-e-solucoes/","title":"Principais Desafios e Solu\u00e7\u00f5es","text":""},{"location":"arquitetura/desafios-e-solucoes/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O que deve conter: Descreva de forma concisa os principais desafios t\u00e9cnicos, operacionais ou arquiteturais encontrados durante o desenvolvimento ou evolu\u00e7\u00e3o do sistema. Explique como cada um foi resolvido, destacando decis\u00f5es estrat\u00e9gicas e impactos positivos.</p> <p>Exemplo: Este documento aborda os desafios mais relevantes enfrentados no projeto de hospedagem de portais WordPress institucionais em nuvem. Cada desafio \u00e9 acompanhado da solu\u00e7\u00e3o adotada, com explica\u00e7\u00f5es t\u00e9cnicas e justificativas para a escolha realizada.</p>"},{"location":"arquitetura/desafios-e-solucoes/#desafios-tecnicos","title":"Desafios T\u00e9cnicos","text":""},{"location":"arquitetura/desafios-e-solucoes/#1-acesso-seguro-ao-painel-administrativo-do-wordpress","title":"1. Acesso Seguro ao Painel Administrativo do WordPress","text":"<p>O que deve conter: - O problema enfrentado. - Impacto potencial caso n\u00e3o resolvido. - Solu\u00e7\u00e3o implementada. - Tecnologias ou pr\u00e1ticas utilizadas.</p> <p>Exemplo: O painel administrativo (<code>/wp-admin</code>) do WordPress \u00e9 um ponto vulner\u00e1vel de ataques automatizados. Permitir acesso irrestrito poderia levar \u00e0 viola\u00e7\u00e3o de seguran\u00e7a por for\u00e7a bruta ou inje\u00e7\u00e3o.</p> <p>Solu\u00e7\u00e3o Adotada: Implementamos uma camada de prote\u00e7\u00e3o baseada em regras de IP no WAF do Cloudflare, combinada com acesso restrito via VPN corporativa. Al\u00e9m disso, integramos o login com Azure AD para autentica\u00e7\u00e3o federada com MFA.</p> <p>Tecnologias Utilizadas: - Cloudflare WAF - Regras de firewall na AWS - Azure AD / EntraID</p>"},{"location":"arquitetura/desafios-e-solucoes/#2-escalabilidade-horizontal-do-wordpress","title":"2. Escalabilidade Horizontal do WordPress","text":"<p>O que deve conter: - O problema enfrentado. - Requisitos n\u00e3o funcionais envolvidos. - Solu\u00e7\u00e3o implementada. - Benef\u00edcios obtidos.</p> <p>Exemplo: O WordPress, por padr\u00e3o, \u00e9 uma aplica\u00e7\u00e3o stateful, o que dificulta sua execu\u00e7\u00e3o em ambientes escal\u00e1veis e ef\u00eameros, especialmente em containers.</p> <p>Solu\u00e7\u00e3o Adotada: Utilizamos o Amazon ECS Fargate para orquestrar inst\u00e2ncias isoladas do WordPress, mantendo o estado persistente no Amazon EFS para uploads e plugins, e no Aurora MySQL para dados estruturados.</p> <p>Benef\u00edcios Obtidos: - Escalabilidade autom\u00e1tica - Isolamento entre ambientes - Maior disponibilidade e recupera\u00e7\u00e3o r\u00e1pida</p>"},{"location":"arquitetura/desafios-e-solucoes/#3-gerenciamento-de-imagens-docker-personalizadas","title":"3. Gerenciamento de Imagens Docker Personalizadas","text":"<p>O que deve conter: - Complexidade identificada. - Limita\u00e7\u00f5es existentes. - Estrat\u00e9gia de resolu\u00e7\u00e3o. - Automa\u00e7\u00e3o envolvida.</p> <p>Exemplo: Cada portal WordPress requer customiza\u00e7\u00f5es espec\u00edficas (plugins, temas, configura\u00e7\u00f5es), o que torna invi\u00e1vel o uso de uma \u00fanica imagem Docker gen\u00e9rica.</p> <p>Solu\u00e7\u00e3o Adotada: Criamos um pipeline de CI/CD no GitLab que gera imagens Docker personalizadas para cada cliente, versionadas e armazenadas no ECR da AWS.</p> <p>Automa\u00e7\u00e3o Envolveda: - Pipeline GitLab CI - Buildspec com AWS CLI - Deploy autom\u00e1tico no ECS</p>"},{"location":"arquitetura/desafios-e-solucoes/#desafios-operacionais","title":"Desafios Operacionais","text":""},{"location":"arquitetura/desafios-e-solucoes/#4-controle-de-versao-dos-sites","title":"4. Controle de Vers\u00e3o dos Sites","text":"<p>O que deve conter: - Necessidade identificada. - Dificuldade operacional sem solu\u00e7\u00e3o. - Implementa\u00e7\u00e3o pr\u00e1tica. - Resultado alcan\u00e7ado.</p> <p>Exemplo: Sem versionamento claro dos conte\u00fados publicados, havia risco de perda de conte\u00fado ou dificuldade em rollback ap\u00f3s erros.</p> <p>Solu\u00e7\u00e3o Adotada: Implementamos backup di\u00e1rio automatizado do banco de dados Aurora e do diret\u00f3rio de uploads no S3. Al\u00e9m disso, usamos o Git para versionar temas e plugins customizados.</p> <p>Resultado Alcan\u00e7ado: - Rollback r\u00e1pido e confi\u00e1vel - Hist\u00f3rico completo de altera\u00e7\u00f5es - Integra\u00e7\u00e3o com processos de disaster recovery</p>"},{"location":"arquitetura/desafios-e-solucoes/#5-monitoramento-e-logs-centralizados","title":"5. Monitoramento e Logs Centralizados","text":"<p>O que deve conter: - Problema de visibilidade no ambiente distribu\u00eddo. - Requisitos de monitoramento. - Ferramentas ou servi\u00e7os utilizados. - Melhoria percebida ap\u00f3s a implementa\u00e7\u00e3o.</p> <p>Exemplo: Com m\u00faltiplos containers WordPress rodando no ECS, tornou-se dif\u00edcil acompanhar logs de erro ou identificar falhas proativas.</p> <p>Solu\u00e7\u00e3o Adotada: Configuramos coleta centralizada de logs usando o CloudWatch Logs da AWS, integrado ao ECS. Tamb\u00e9m adicionamos alertas por m\u00e9tricas cr\u00edticas (CPU, mem\u00f3ria, erros HTTP).</p> <p>Ferramentas Utilizadas: - AWS CloudWatch Logs - CloudWatch Alarms - Dashboard customizado no Grafana (opcional)</p> <p>Melhoria Percebida: - Detec\u00e7\u00e3o precoce de anomalias - Redu\u00e7\u00e3o de tempo de an\u00e1lise de incidentes - Maior visibilidade operacional</p>"},{"location":"arquitetura/desafios-e-solucoes/#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>O que deve conter: - Resumo dos principais aprendizados. - Reflex\u00e3o sobre decis\u00f5es tomadas. - Sugest\u00f5es para futuras melhorias ou adapta\u00e7\u00f5es.</p> <p>Exemplo: A ado\u00e7\u00e3o de uma arquitetura modular e segura permitiu escalar rapidamente a infraestrutura para novos clientes. Os desafios t\u00e9cnicos foram superados com solu\u00e7\u00f5es nativas da nuvem e automa\u00e7\u00e3o cont\u00ednua. Futuramente, planejamos migrar parte do controle de acesso para uma solu\u00e7\u00e3o zero-trust e aumentar a cobertura de testes automatizados nos pipelines.</p>"},{"location":"arquitetura/low-level/","title":"Design T\u00e9cnico de Baixo N\u00edvel","text":""},{"location":"arquitetura/low-level/#objetivo","title":"Objetivo","text":"<p>O que deve conter:</p> <p>Descreve os detalhes t\u00e9cnicos da implementa\u00e7\u00e3o da arquitetura. Deve ser voltado para operadores de infraestrutura, DevOps e desenvolvedores que precisam compreender o comportamento interno da solu\u00e7\u00e3o, configura\u00e7\u00f5es, automa\u00e7\u00f5es, seguran\u00e7a e pr\u00e1ticas operacionais.</p> <p>Exemplo:</p> <p>Esta se\u00e7\u00e3o detalha o comportamento interno do ambiente WordPress implantado em containers ECS, incluindo fluxo de requisi\u00e7\u00e3o, vari\u00e1veis de configura\u00e7\u00e3o, processos de deploy, estrat\u00e9gias de seguran\u00e7a e procedimentos de backup. Ela serve como refer\u00eancia t\u00e9cnica para manuten\u00e7\u00e3o e evolu\u00e7\u00e3o da solu\u00e7\u00e3o.</p>"},{"location":"arquitetura/low-level/#fluxo-de-requisicao","title":"Fluxo de Requisi\u00e7\u00e3o","text":"<p>O que deve conter:</p> <p>Descreva o caminho completo de uma requisi\u00e7\u00e3o t\u00edpica do usu\u00e1rio at\u00e9 o backend. Inclua componentes intermedi\u00e1rios (CDN, balanceadores, servi\u00e7os internos) e explique como o conte\u00fado \u00e9 entregue.</p> <p>Exemplo:</p> <ol> <li>O usu\u00e1rio acessa <code>https://xpto.com.br</code>.</li> <li>A requisi\u00e7\u00e3o \u00e9 inspecionada pelo WAF da Cloudflare, que aplica pol\u00edticas de seguran\u00e7a e cache.</li> <li>Se permitida, a requisi\u00e7\u00e3o \u00e9 encaminhada ao Application Load Balancer (ALB) da AWS.</li> <li>O ALB distribui o tr\u00e1fego para uma task ECS em execu\u00e7\u00e3o, onde o WordPress est\u00e1 rodando em um container.</li> <li>O WordPress acessa o banco de dados Amazon Aurora para recuperar o conte\u00fado e carrega arquivos do Amazon EFS.</li> <li>A resposta \u00e9 enviada de volta ao usu\u00e1rio pelo mesmo caminho reverso.</li> </ol>"},{"location":"arquitetura/low-level/#configuracoes-de-ambiente","title":"Configura\u00e7\u00f5es de Ambiente","text":"<p>O que deve conter:</p> <p>Liste as vari\u00e1veis de ambiente, configura\u00e7\u00f5es de runtime, depend\u00eancias externas, mapeamentos de volumes e recursos consumidos (mem\u00f3ria, CPU etc.).</p> <p>Exemplo:</p> Vari\u00e1vel / Configura\u00e7\u00e3o Valor / Descri\u00e7\u00e3o <code>WORDPRESS_DB_HOST</code> aurora-cluster.cluster-abc.us-east-1.rds.amazonaws.com <code>WORDPRESS_DB_USER</code> admin <code>WORDPRESS_DB_PASSWORD</code> Armazenado como secret no ECS <code>WORDPRESS_DB_NAME</code> wp_prod <code>WP_HOME</code> https://portal.exemplo.gov.br <code>WP_SITEURL</code> https://portal.exemplo.gov.br Montagem de volume EFS Montado no container em <code>/var/www/html/wp-content</code>"},{"location":"arquitetura/low-level/#requisitos-de-infraestrutura","title":"Requisitos de Infraestrutura","text":"<p>O que deve conter:</p> <p>Detalhe os recursos m\u00ednimos necess\u00e1rios para execu\u00e7\u00e3o da aplica\u00e7\u00e3o. Isso inclui CPU, mem\u00f3ria, pol\u00edtica de rede, sistema operacional ou imagem base, al\u00e9m de configura\u00e7\u00f5es espec\u00edficas de execu\u00e7\u00e3o. Essas informa\u00e7\u00f5es s\u00e3o importantes para sizing, escalabilidade e custo.</p> <p>Exemplo:</p> Requisito Valor / Descri\u00e7\u00e3o CPU 0.5 vCPU (por container ECS) Mem\u00f3ria 1 GB (por container ECS) Rede Sub-redes privadas, sem IP p\u00fablico Sistema Operacional Amazon Linux 2 (base da imagem Fargate) Imagem Docker <code>registry.gitlab.com/exemplo/wordpress-custom:latest</code> Montagem de volume (EFS) <code>/var/www/html/wp-content</code> Logging Logs enviados para AWS CloudWatch Logs com reten\u00e7\u00e3o de 30 dias <p>Essas configura\u00e7\u00f5es foram definidas para balancear custo e desempenho, considerando o perfil de uso dos portais e a arquitetura baseada em Fargate. Em projetos com maior volume de tr\u00e1fego ou processamento, os valores de CPU e mem\u00f3ria podem ser ajustados conforme m\u00e9tricas reais de uso.</p>"},{"location":"arquitetura/low-level/#pipeline-de-deploy","title":"Pipeline de Deploy","text":"<p>O que deve conter:</p> <p>Descreva como a aplica\u00e7\u00e3o \u00e9 implantada: processo de build da imagem, testes, publica\u00e7\u00e3o e atualiza\u00e7\u00e3o do servi\u00e7o. Se for gerenciado por pipeline CI/CD, documente os est\u00e1gios e ferramentas utilizadas.</p> <p>Exemplo:</p> <ol> <li>Desenvolvedores versionam o c\u00f3digo e as configura\u00e7\u00f5es da aplica\u00e7\u00e3o no GitLab.</li> <li>O GitLab CI \u00e9 respons\u00e1vel por:</li> <li>Executar testes automatizados</li> <li>Construir a imagem Docker do WordPress personalizada</li> <li>Publicar a imagem no Amazon ECR</li> <li>Aplicar atualiza\u00e7\u00f5es no ECS com <code>deploy rolling</code> controlado</li> <li>As configura\u00e7\u00f5es de infraestrutura (ALB, ECS, Aurora, EFS) s\u00e3o gerenciadas via Terraform, com reposit\u00f3rio separado, seguindo pr\u00e1ticas de GitOps.</li> </ol>"},{"location":"arquitetura/low-level/#estrategias-de-seguranca","title":"Estrat\u00e9gias de Seguran\u00e7a","text":"<p>O que deve conter:</p> <p>Explique os mecanismos de seguran\u00e7a adotados para proteger o ambiente, como controle de acesso, uso de VPN, autentica\u00e7\u00e3o, criptografia, e prote\u00e7\u00e3o contra ataques externos.</p> <p>Exemplo:</p> <ul> <li>A URL <code>/wp-admin</code> \u00e9 protegida por uma regra personalizada de WAF na Cloudflare que bloqueia todo tr\u00e1fego externo n\u00e3o proveniente de IPs da VPN.</li> <li>A autentica\u00e7\u00e3o no painel do WordPress \u00e9 federada via EntraID (Azure AD), com autentica\u00e7\u00e3o multifator ativada.</li> <li>Containers ECS n\u00e3o t\u00eam IP p\u00fablico e comunicam-se exclusivamente em sub-redes privadas.</li> <li>Todos os segredos (senhas, tokens) s\u00e3o armazenados como <code>secrets</code> no ECS, com permiss\u00f5es controladas via IAM.</li> <li>Logs de acesso e erros s\u00e3o auditados via CloudWatch Logs.</li> </ul>"},{"location":"arquitetura/low-level/#estrategia-de-backup-e-recuperacao","title":"Estrat\u00e9gia de Backup e Recupera\u00e7\u00e3o","text":"<p>O que deve conter:</p> <p>Explique como backups s\u00e3o realizados, onde s\u00e3o armazenados, frequ\u00eancia, reten\u00e7\u00e3o e como ocorre a recupera\u00e7\u00e3o em caso de falha.</p> <p>Exemplo:</p> <ul> <li>O Amazon Aurora realiza backups autom\u00e1ticos com reten\u00e7\u00e3o de 7 dias e suporta Point-in-Time Recovery (PITR).</li> <li>O Amazon EFS \u00e9 protegido por pol\u00edticas do AWS Backup, com execu\u00e7\u00e3o semanal e reten\u00e7\u00e3o de 30 dias.</li> <li>Restaura\u00e7\u00e3o do banco e do EFS pode ser feita manualmente por operadores com permiss\u00e3o, via console AWS ou CLI.</li> <li>Os dados cr\u00edticos s\u00e3o armazenados em m\u00faltiplas zonas de disponibilidade (Multi-AZ) para resili\u00eancia adicional.</li> </ul>"},{"location":"arquitetura/modelo-c4/","title":"Modelo C4","text":""},{"location":"arquitetura/modelo-c4/#objetivo","title":"Objetivo","text":"<p>O que deve conter:</p> <p>Explique o prop\u00f3sito da ado\u00e7\u00e3o do Modelo C4. Destaque que ele permite visualizar a arquitetura do sistema em diferentes n\u00edveis de abstra\u00e7\u00e3o, facilitando o entendimento t\u00e9cnico por p\u00fablicos distintos (devs, ops, gest\u00e3o).</p> <p>Exemplo:</p> <p>O Modelo C4 \u00e9 utilizado para representar visualmente a arquitetura do sistema em quatro n\u00edveis progressivos de detalhamento: contexto, containers, componentes e, quando aplic\u00e1vel, c\u00f3digo. Esta abordagem fornece uma linguagem visual padronizada que facilita a comunica\u00e7\u00e3o entre times t\u00e9cnicos e gestores, garantindo clareza na modelagem da solu\u00e7\u00e3o.</p>"},{"location":"arquitetura/modelo-c4/#nivel-1-diagrama-de-contexto","title":"N\u00edvel 1 \u2014 Diagrama de Contexto","text":"<p>O que deve conter:</p> <p>Represente como o sistema se relaciona com usu\u00e1rios externos, atores institucionais, integra\u00e7\u00f5es externas e ambientes. Este diagrama n\u00e3o precisa mostrar detalhes internos \u2014 o foco \u00e9 a vis\u00e3o macro.</p> <p>Exemplo:</p> <p>Este n\u00edvel mostra que o sistema:</p> <ul> <li>\u00c9 acessado por usu\u00e1rios externos via navegador.</li> <li>Est\u00e1 protegido por Cloudflare, que atua como proxy reverso e WAF.</li> <li>Interage com sistemas externos como provedores de identidade (EntraID) e servi\u00e7os de DNS.</li> </ul> <p>Imagem esperada:</p> <pre><code>![Diagrama de Contexto](../img/contexto.png)\n</code></pre>"},{"location":"arquitetura/modelo-c4/#nivel-2-diagrama-de-containers","title":"N\u00edvel 2 \u2014 Diagrama de Containers","text":"<p>O que deve conter:</p> <p>Descreva os principais containers, servi\u00e7os ou aplica\u00e7\u00f5es que comp\u00f5em o sistema. Indique suas responsabilidades, tecnologias utilizadas, como se comunicam entre si e com o exterior. Este n\u00edvel \u00e9 fundamental para equipes t\u00e9cnicas compreenderem a divis\u00e3o funcional da aplica\u00e7\u00e3o.</p> <p>Exemplo:</p> <p>A arquitetura \u00e9 composta pelos seguintes containers e servi\u00e7os:</p> <ul> <li>Cloudflare: Atua como camada de prote\u00e7\u00e3o (WAF), entrega de conte\u00fado (CDN) e gerenciamento de DNS.</li> <li>Application Load Balancer (ALB): Respons\u00e1vel por receber as requisi\u00e7\u00f5es HTTP da internet e distribu\u00ed-las para os containers do WordPress.</li> <li>Amazon ECS (Fargate): Executa containers isolados do WordPress, sem necessidade de provisionamento de servidores.</li> <li>Amazon Aurora: Banco de dados relacional altamente dispon\u00edvel, compat\u00edvel com MySQL.</li> <li>Amazon EFS: Sistema de arquivos montado em rede para armazenar uploads, plugins e configura\u00e7\u00f5es do WordPress.</li> </ul> <p>O diagrama a seguir mostra a comunica\u00e7\u00e3o entre esses containers e servi\u00e7os:</p> <pre><code>![Diagrama de Containers](../img/containers.png)\n</code></pre>"},{"location":"arquitetura/modelo-c4/#nivel-3-diagrama-de-componentes-opcional","title":"N\u00edvel 3 \u2014 Diagrama de Componentes (opcional)","text":"<p>O que deve conter:</p> <p>Inclua este n\u00edvel somente quando houver l\u00f3gica espec\u00edfica implementada dentro de um container ou aplica\u00e7\u00e3o que justifique o detalhamento. Use este diagrama para mostrar como diferentes m\u00f3dulos internos se organizam e interagem dentro de uma aplica\u00e7\u00e3o, especialmente se houver desenvolvimento pr\u00f3prio ou integra\u00e7\u00e3o com sistemas internos.</p> <p>Exemplo:</p> <p>No caso de um ambiente WordPress com personaliza\u00e7\u00f5es, o container pode incluir os seguintes componentes:</p> <ul> <li>Autentica\u00e7\u00e3o Federada (SSO com EntraID): Plugin customizado ou configurado que permite login com contas institucionais via protocolo SAML ou OpenID Connect.</li> <li>Gerenciador de Cache Interno: Componente que realiza cache de p\u00e1ginas e objetos usando plugins como W3 Total Cache ou Redis Object Cache.</li> <li>M\u00f3dulo de Integra\u00e7\u00e3o com APIs Institucionais: Respons\u00e1vel por consumir APIs REST externas, como sistemas acad\u00eamicos, diret\u00f3rios ou portais da organiza\u00e7\u00e3o.</li> </ul> <p>Estes componentes s\u00e3o estruturados dentro do pr\u00f3prio container do WordPress e configurados via arquivos de tema, plugin ou scripts adicionais embarcados na imagem Docker.</p> <p>Se a aplica\u00e7\u00e3o utiliza WordPress sem personaliza\u00e7\u00f5es relevantes, este n\u00edvel pode ser omitido da documenta\u00e7\u00e3o.</p> <pre><code>![Diagrama de Componentes](../img/componentes.png)\n</code></pre>"},{"location":"arquitetura/modelo-c4/#nivel-4-diagrama-de-codigo-opcional","title":"N\u00edvel 4 \u2014 Diagrama de C\u00f3digo (opcional)","text":"<p>O que deve conter:</p> <p>Este n\u00edvel s\u00f3 deve ser inclu\u00eddo quando houver desenvolvimento interno que justifique o detalhamento da estrutura de c\u00f3digo. O foco \u00e9 mostrar como o c\u00f3digo-fonte est\u00e1 organizado internamente, seja por classes, fun\u00e7\u00f5es, pacotes ou m\u00f3dulos. N\u00e3o \u00e9 necess\u00e1rio para aplica\u00e7\u00f5es que utilizam software de prateleira sem personaliza\u00e7\u00f5es relevantes.</p> <p>Exemplo:</p> <p>No contexto deste projeto, este n\u00edvel pode ser utilizado quando h\u00e1 desenvolvimento de plugins ou middlewares personalizados, como:</p> <ul> <li>Plugin de autentica\u00e7\u00e3o com EntraID (Azure AD)</li> <li>Middleware de auditoria e rastreamento de acessos administrativos</li> <li>Integra\u00e7\u00f5es com APIs REST de sistemas internos (ex: matr\u00edcula, eventos, diret\u00f3rios)</li> </ul> <p>Um diagrama de c\u00f3digo pode representar:</p> <ul> <li>A estrutura de classes PHP utilizadas na l\u00f3gica do plugin</li> <li>Fluxos de execu\u00e7\u00e3o entre controladores, manipuladores de eventos e fun\u00e7\u00f5es auxiliares</li> <li>O uso de padr\u00f5es como MVC, Hook-based architecture ou Inje\u00e7\u00e3o de Depend\u00eancia</li> </ul> <p>Quando n\u00e3o incluir:</p> <p>Se o WordPress for utilizado com temas e plugins p\u00fablicos, sem desenvolvimento pr\u00f3prio ou l\u00f3gica customizada, este n\u00edvel deve ser omitido para manter a documenta\u00e7\u00e3o objetiva e enxuta.</p> <p>Imagem esperada (se aplic\u00e1vel):</p> <pre><code>![Diagrama de C\u00f3digo](../img/codigo.png)\n</code></pre>"},{"location":"arquitetura/modelo-c4/#armazenamento-e-referencia-de-imagens","title":"Armazenamento e Refer\u00eancia de Imagens","text":"<p>O que deve conter:</p> <p>Defina uma conven\u00e7\u00e3o de armazenamento e nomenclatura para os diagramas utilizados na documenta\u00e7\u00e3o. Essa padroniza\u00e7\u00e3o garante organiza\u00e7\u00e3o, facilita a manuten\u00e7\u00e3o ao longo do tempo e assegura consist\u00eancia entre projetos que utilizam este template.</p> <p>Exemplo:</p> <p>Todos os diagramas utilizados nesta documenta\u00e7\u00e3o devem ser armazenados na pasta <code>docs/img/</code> com os seguintes nomes padronizados: <pre><code>docs/img/\n\u251c\u2500\u2500 contexto.png # Diagrama de N\u00edvel 1 (Contexto)\n\u251c\u2500\u2500 containers.png # Diagrama de N\u00edvel 2 (Containers)\n\u251c\u2500\u2500 componentes.png # Diagrama de N\u00edvel 3 (Componentes)\n\u2514\u2500\u2500 codigo.png # Diagrama de N\u00edvel 4 (C\u00f3digo)\n</code></pre></p> <p>Esses arquivos devem ser mantidos em formato <code>.png</code> ou <code>.svg</code> exportados diretamente das ferramentas de modelagem utilizadas.</p>"},{"location":"arquitetura/modelo-c4/#ferramentas-recomendadas","title":"Ferramentas recomendadas","text":"<ul> <li>draw.io (diagrams.net) \u2013 ferramenta visual, amplamente adotada, com suporte a versionamento por arquivo <code>.drawio</code>.</li> <li>Structurizr DSL \u2013 ideal para quem deseja gerar os diagramas a partir de arquivos de texto e manter como c\u00f3digo.</li> <li>MermaidJS ou PlantUML \u2013 \u00fateis quando os diagramas precisam ser inclu\u00eddos diretamente no Markdown e renderizados dinamicamente.</li> </ul>"},{"location":"arquitetura/modelo-c4/#como-incluir-imagens-no-markdown","title":"Como incluir imagens no Markdown","text":"<p>Para referenciar as imagens nos arquivos <code>.md</code>, utilizar o seguinte padr\u00e3o:</p> <pre><code>![Diagrama de Containers](../img/containers.png)\n</code></pre>"},{"location":"arquitetura/visao-geral/","title":"Vis\u00e3o Geral da Arquitetura","text":""},{"location":"arquitetura/visao-geral/#objetivo","title":"Objetivo","text":"<p>O que deve conter: Descreva o prop\u00f3sito geral da aplica\u00e7\u00e3o ou sistema. Apresente o contexto institucional ou de neg\u00f3cio que motivou sua cria\u00e7\u00e3o e os benef\u00edcios esperados com sua ado\u00e7\u00e3o.</p> <p>Exemplo:</p> <p>Esta solu\u00e7\u00e3o tem como objetivo hospedar portais institucionais baseados em WordPress com alta disponibilidade, seguran\u00e7a e governan\u00e7a. A arquitetura foi desenhada para ser reutiliz\u00e1vel por m\u00faltiplos projetos da organiza\u00e7\u00e3o, com foco em automa\u00e7\u00e3o, isolamento de ambientes e controle centralizado de acesso.</p> <p>Benef\u00edcios esperados: - Redu\u00e7\u00e3o no tempo de provisionamento de novos portais. - Melhoria na seguran\u00e7a e conformidade com normativas. - Simplifica\u00e7\u00e3o da manuten\u00e7\u00e3o e atualiza\u00e7\u00e3o dos ambientes.</p>"},{"location":"arquitetura/visao-geral/#finalidade-do-sistema","title":"Finalidade do Sistema","text":"<p>O que deve conter: Descreva qual problema o sistema resolve e quem s\u00e3o seus usu\u00e1rios. Apresente os principais requisitos funcionais e n\u00e3o funcionais que impactaram o desenho da arquitetura.</p> <p>Exemplo:</p> <p>O sistema atende \u00e0 necessidade de publica\u00e7\u00e3o de conte\u00fado institucional de forma aut\u00f4noma pelas equipes de comunica\u00e7\u00e3o, com seguran\u00e7a refor\u00e7ada no painel administrativo e infraestrutura escal\u00e1vel e resiliente.</p> <p>Usu\u00e1rios principais: - Administradores de conte\u00fado: respons\u00e1veis pela cria\u00e7\u00e3o e edi\u00e7\u00e3o das p\u00e1ginas. - Visitantes p\u00fablicos: acessam os conte\u00fados publicados.</p> <p>Requisitos que impactaram a arquitetura: - Funcionais: m\u00faltiplos ambientes (dev, homologa\u00e7\u00e3o, produ\u00e7\u00e3o), suporte a temas/plugins customizados, integra\u00e7\u00e3o com provedor de identidade. - N\u00e3o funcionais: alta disponibilidade, escalabilidade horizontal, registro de auditoria, backups autom\u00e1ticos e recupera\u00e7\u00e3o de desastres.</p>"},{"location":"arquitetura/visao-geral/#componentes-principais","title":"Componentes Principais","text":"<p>O que deve conter: Liste os principais servi\u00e7os e tecnologias utilizados. Para cada componente, descreva sua fun\u00e7\u00e3o, sua rela\u00e7\u00e3o com os demais e se \u00e9 gerenciado ou customizado.</p> <p>Exemplo:</p>"},{"location":"arquitetura/visao-geral/#1-cloudflare","title":"1. Cloudflare","text":"<ul> <li>Fun\u00e7\u00e3o: DNS, proxy reverso, WAF e CDN.</li> <li>Relacionamento: protege e acelera o tr\u00e1fego HTTP, aplicando pol\u00edticas de seguran\u00e7a e cache.</li> <li>Tipo: servi\u00e7o gerenciado com automa\u00e7\u00e3o via token.</li> </ul>"},{"location":"arquitetura/visao-geral/#2-application-load-balancer-alb","title":"2. Application Load Balancer (ALB)","text":"<ul> <li>Fun\u00e7\u00e3o: balanceador de carga HTTP.</li> <li>Relacionamento: distribui requisi\u00e7\u00f5es para containers do WordPress no ECS Fargate.</li> <li>Tipo: gerenciado pela AWS.</li> </ul>"},{"location":"arquitetura/visao-geral/#3-amazon-ecs-fargate","title":"3. Amazon ECS (Fargate)","text":"<ul> <li>Fun\u00e7\u00e3o: execu\u00e7\u00e3o de containers sem gerenciamento de servidores.</li> <li>Relacionamento: executa inst\u00e2ncias isoladas do WordPress.</li> <li>Tipo: gerenciado com configura\u00e7\u00e3o customizada via imagem Docker.</li> </ul>"},{"location":"arquitetura/visao-geral/#4-amazon-aurora-mysql","title":"4. Amazon Aurora (MySQL)","text":"<ul> <li>Fun\u00e7\u00e3o: banco de dados relacional escal\u00e1vel.</li> <li>Relacionamento: armazena o conte\u00fado do site com inst\u00e2ncia prim\u00e1ria e r\u00e9plica de leitura.</li> <li>Tipo: servi\u00e7o gerenciado com backup e replica\u00e7\u00e3o autom\u00e1ticos.</li> </ul>"},{"location":"arquitetura/visao-geral/#5-amazon-efs","title":"5. Amazon EFS","text":"<ul> <li>Fun\u00e7\u00e3o: sistema de arquivos compartilhado entre containers.</li> <li>Relacionamento: armazena uploads, plugins e temas.</li> <li>Tipo: gerenciado pela AWS, montado via target em sub-redes privadas.</li> </ul>"},{"location":"arquitetura/visao-geral/#6-vpn-waf","title":"6. VPN + WAF","text":"<ul> <li>Fun\u00e7\u00e3o: restringe o acesso ao painel administrativo <code>/wp-admin</code>.</li> <li>Relacionamento: acesso autorizado apenas a usu\u00e1rios da VPN institucional via regras de IP no WAF da Cloudflare.</li> <li>Tipo: configura\u00e7\u00e3o personalizada de seguran\u00e7a.</li> </ul>"},{"location":"arquitetura/visao-geral/#integracoes-externas","title":"Integra\u00e7\u00f5es Externas","text":"<p>O que deve conter: Liste e justifique as integra\u00e7\u00f5es com provedores externos. Indique o tipo de integra\u00e7\u00e3o (DNS, autentica\u00e7\u00e3o, CI/CD etc.) e sua motiva\u00e7\u00e3o t\u00e9cnica.</p> <p>Exemplo:</p>"},{"location":"arquitetura/visao-geral/#1-cloudflare_1","title":"1. Cloudflare","text":"<ul> <li>Tipo: DNS gerenciado e seguran\u00e7a (WAF/CDN).</li> <li>Motiva\u00e7\u00e3o: prote\u00e7\u00e3o na borda, controle de tr\u00e1fego e automa\u00e7\u00e3o de zonas via API.</li> </ul>"},{"location":"arquitetura/visao-geral/#2-gitlab-cicd","title":"2. GitLab CI/CD","text":"<ul> <li>Tipo: deploy automatizado via pipeline.</li> <li>Motiva\u00e7\u00e3o: entrega cont\u00ednua confi\u00e1vel de imagens Docker para o ECS.</li> </ul>"},{"location":"arquitetura/visao-geral/#3-entraid-azure-ad","title":"3. EntraID (Azure AD)","text":"<ul> <li>Tipo: autentica\u00e7\u00e3o federada (IdP).</li> <li>Motiva\u00e7\u00e3o: controle de acesso centralizado, com autentica\u00e7\u00e3o multifator e auditoria.</li> </ul>"},{"location":"arquitetura/visao-geral/#diagrama-da-arquitetura","title":"Diagrama da Arquitetura","text":"<p>O que deve conter: Inclua um diagrama de containers destacando sub-redes, servi\u00e7os internos, pontos de entrada e comunica\u00e7\u00e3o entre componentes.</p> <p>Exemplo:</p> <p></p> <p>Observa\u00e7\u00f5es: - O tr\u00e1fego entra via Cloudflare, que aplica pol\u00edticas de WAF e encaminha ao ALB. - O ALB distribui as requisi\u00e7\u00f5es entre containers ECS em sub-redes privadas. - Os containers WordPress acessam o Aurora e armazenam dados no EFS. - A \u00e1rea <code>/wp-admin</code> \u00e9 protegida por regras de IP e autentica\u00e7\u00e3o federada.</p>"},{"location":"arquitetura/visao-geral/#fluxo-de-trafego","title":"Fluxo de Tr\u00e1fego","text":"<p>O que deve conter: Descreva de forma sequencial como o tr\u00e1fego flui no sistema, do acesso inicial at\u00e9 a resposta final.</p> <p>Exemplo:</p> <ol> <li>Entrada de tr\u00e1fego:</li> <li>O usu\u00e1rio acessa o dom\u00ednio configurado no Cloudflare.</li> <li> <p>O WAF valida o tr\u00e1fego e aplica regras de cache e prote\u00e7\u00e3o.</p> </li> <li> <p>Roteamento interno:</p> </li> <li>O ALB recebe a requisi\u00e7\u00e3o e roteia para uma task ECS.</li> <li> <p>O container WordPress processa a requisi\u00e7\u00e3o.</p> </li> <li> <p>Acesso a dados:</p> </li> <li>Leitura e escrita s\u00e3o feitas no Aurora.</li> <li> <p>A r\u00e9plica \u00e9 usada para consultas de leitura intensiva.</p> </li> <li> <p>Armazenamento persistente:</p> </li> <li> <p>Arquivos s\u00e3o armazenados em EFS, acessado por m\u00faltiplos containers.</p> </li> <li> <p>Seguran\u00e7a de acesso:</p> </li> <li><code>/wp-admin</code> s\u00f3 \u00e9 acess\u00edvel por IPs autorizados na VPN.</li> <li>Autentica\u00e7\u00e3o federada via Azure AD com MFA.</li> </ol>"},{"location":"arquitetura/visao-geral/#principios-de-arquitetura-adotados","title":"Princ\u00edpios de Arquitetura Adotados","text":"<p>O que deve conter: Liste os princ\u00edpios que orientaram o desenho da solu\u00e7\u00e3o. Isso deve refletir decis\u00f5es t\u00e9cnicas alinhadas \u00e0 estrat\u00e9gia institucional.</p> <p>Exemplo:</p> <ul> <li>Isolamento de ambientes: cada portal \u00e9 implantado em sua pr\u00f3pria stack (infra + app).</li> <li>Infraestrutura como c\u00f3digo: todos os recursos AWS e configura\u00e7\u00f5es s\u00e3o provisionados via Terraform.</li> <li>Seguran\u00e7a em camadas: WAF, autentica\u00e7\u00e3o federada, redes privadas e uso de VPN.</li> <li>Escalabilidade horizontal: containers ECS sobem sob demanda conforme carga.</li> <li>Governan\u00e7a de acesso: EntraID utilizado como IdP central, com logs de auditoria.</li> </ul>"},{"location":"arquitetura/visao-geral/#prompt-para-geracao-automatica","title":"Prompt para Gera\u00e7\u00e3o Autom\u00e1tica","text":"<p>O que deve conter: Forne\u00e7a um modelo de prompt para ser utilizado com ferramentas de IA que possam auxiliar na gera\u00e7\u00e3o automatizada de documenta\u00e7\u00e3o.</p> <p>Exemplo:</p> <p>Voc\u00ea \u00e9 um arquiteto s\u00eanior documentando uma solu\u00e7\u00e3o em nuvem AWS. Com base na seguinte descri\u00e7\u00e3o: 'Sistema WordPress institucional hospedado na AWS, utilizando Cloudflare, ALB, ECS Fargate, Aurora, EFS, WAF e controle de acesso via Azure AD.'  </p> <p>Escreva as seguintes se\u00e7\u00f5es da documenta\u00e7\u00e3o t\u00e9cnica: - Objetivo do sistema - Finalidade (usu\u00e1rios e requisitos) - Componentes principais (fun\u00e7\u00e3o, relacionamento e tipo) - Integra\u00e7\u00f5es externas - Fluxo de tr\u00e1fego - Princ\u00edpios de arquitetura adotados  </p> <p>Use linguagem t\u00e9cnica e padronizada, com exemplos claros e estrutura objetiva.</p>"}]}